/**
 * https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API
 */

import { stringToArrayBuffer } from './arrayBuffer'

const algorithm = 'AES-GCM'

/**
 * encrypt
 * https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt
 * @param {string} passwd 
 * @param {arrayBuffer} data 
 */
export async function encrypt(passwd, data) {
    const key = await importKey(passwd)

    // Don't re-use initialization vectors! Always generate a new iv every time your encrypt!
    // Recommended to use 12 bytes length
    // where iv is an ArrayBuffer or an ArrayBufferView with 12 random bytes (these should be generated by RandomSource.getRandomValues()).
    const iv = window.crypto.getRandomValues(new Uint8Array(12))

    // key: from generateKey or importKey above
    // data: ArrayBuffer of data you want to encrypt
    // returns an ArrayBuffer containing the encrypted data
    const encrypted = await window.crypto.subtle.encrypt({ name: algorithm, iv }, key, data)
    return {
        iv: iv.buffer,
        data: encrypted,
    }
}

/**
 * decrypt
 * @param {string} passwd 
 * @param {arrayBuffer} iv 
 * @param {arrayBuffer} data 
 */
export async function decrypt(passwd, iv, data) {
    const key = await importKey(passwd)
    const decrypted = await window.crypto.subtle.decrypt({ name: algorithm, iv }, key, data)
    return decrypted
}

async function importKey(passwd) {
    // AES key data must be 128 or 256 bits
    const rawKey = stringToArrayBuffer(passwd)
    return await window.crypto.subtle.importKey('raw', rawKey, { name: algorithm }, false, ['encrypt', 'decrypt'])
}
